
import java.util.*;

/**
 * TEST Input
 *
 * 1
 * 8
 * 10 22 9 33 21 50 41 60
 *
 * arr[0..j..i..n]
 * idea is to find the max value of LIS in arr[0..(i-1)] using inner loop
 * and assigning max + 1 for the current index i till all elements are processed
 *
 * e.g. arr= { 10, 22, 9, 33, 21, 50, 41, 60 }
 *      dp =   1    2   1   3   2   4   4   5
 *      ans = 5 (max among these)
 */
public class LongestIncreasingSubsequence {
    public static void main(String[] args) throws Exception{
        Scanner sc = new Scanner(System.in);
        int testSize = sc.nextInt();
        while( testSize--!=0){
            int arrSize = sc.nextInt();
            int arr[] = new int[arrSize];
            for(int i=0; i< arrSize; i++){
                arr[i] = sc.nextInt();
            }
            // array to hold LIS till index i
            int dp[] = new int[arr.length];
            // max value of LIS
            int max = 1;
            for(int i=0; i<arr.length; i++){
                int maxTillNow = 1;
                for(int j=0; j<i; j++){
                    if(arr[j] < arr[i] && dp[j]>=maxTillNow){
                        dp[i] = dp[j]+1;
                        maxTillNow = dp[i];
                    }
                }
                if(dp[i] == 0){
                    dp[i] = 1;
                }
                if(max < maxTillNow){
                    max = maxTillNow;
                }
            }

            for (int i=0; i<arrSize;i++)
                System.out.print(dp[i]+" ");
            System.out.println("\n"+max);
        }
    }
}
